; a program meant to calculate fibbonaci sequence

.section .data
init1: 0		ef0
init2: 1		ef1
outp: 0			ef3

.section .text
global _start

_start:
lda [init1]		1000ef0		; load initial values
ldb [init2]		2000ef1
run:					;run function
addm [outp]		a000ef3		; store output of add
lda [init1]		1000ef0		; wipe register a
addc			9000000		; store register b to register c
cta			4000000		; put register c into register a
ldb [outp]		2000ef3		; put the output into register b
jmp run			6000002		; go back to run function


;example use for the gpu making a zigzag pattern

.section .data

line1: 	f0f0f0f0	ef0
line2: 	70707070	ef1
store: 	80000000	ef2
write1:	40000000	ef3
write2:	60000000	ef4
four:	4		ef5


.section .text
global _start

_start:
ldc [line1]		03000ef0
cout [store]		1d000ef2
lda [four]		01000ef5
ldb [store]		02000ef2
addm [store]		0a000ef2
ldc [line2]		03000ef1
cout [store]		1d000ef2
ldb [write2]		02000ef4
addm [write2]		0a000ef4
cout [write2]		1d000ef4
jmp _start		06000000



; python for video


def storevid(video, start):
	memstart = start
	for frame in video:
		cout(gpu.store + memstart, frame[0][0])
		memstart += 1
		cout(gpu.store + memstart, frame[0][1])
		memstart += 1
		cout(gpu.store + memstart, frame[0][2])
		memstart += 1
		cout(gpu.store + memstart, frame[0][3])
		memstart += 1
		cout(gpu.store + memstart, frame[0][4])
		memstart += 1
		cout(gpu.store + memstart, frame[0][5])
		memstart += 1
		cout(gpu.store + memstart, frame[0][6])
		memstart += 1
		cout(gpu.store + memstart, frame[0][7])
		memstart += 1
		cout(gpu.store + memstart, frame[1][0])
		memstart += 1
		cout(gpu.store + memstart, frame[1][1])
		memstart += 1
		cout(gpu.store + memstart, frame[1][2])
		memstart += 1
		cout(gpu.store + memstart, frame[1][3])
		memstart += 1
		cout(gpu.store + memstart, frame[1][4])
		memstart += 1
		cout(gpu.store + memstart, frame[1][5])
		memstart += 1
		cout(gpu.store + memstart, frame[1][6])
		memstart += 1
		cout(gpu.store + memstart, frame[1][7])
		memstart += 1

